/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Quote extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8038664966901552948L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Quote\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"ticket\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"string\"},{\"name\":\"high\",\"type\":\"string\"},{\"name\":\"close\",\"type\":\"string\"},{\"name\":\"volume\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Quote> ENCODER =
      new BinaryMessageEncoder<Quote>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Quote> DECODER =
      new BinaryMessageDecoder<Quote>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Quote> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Quote> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Quote>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Quote to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Quote from a ByteBuffer. */
  public static Quote fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence ticket;
  @Deprecated public java.lang.CharSequence open;
  @Deprecated public java.lang.CharSequence high;
  @Deprecated public java.lang.CharSequence close;
  @Deprecated public java.lang.CharSequence volume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Quote() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param date The new value for date
   * @param ticket The new value for ticket
   * @param open The new value for open
   * @param high The new value for high
   * @param close The new value for close
   * @param volume The new value for volume
   */
  public Quote(java.lang.CharSequence id, java.lang.CharSequence date, java.lang.CharSequence ticket, java.lang.CharSequence open, java.lang.CharSequence high, java.lang.CharSequence close, java.lang.CharSequence volume) {
    this.id = id;
    this.date = date;
    this.ticket = ticket;
    this.open = open;
    this.high = high;
    this.close = close;
    this.volume = volume;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return date;
    case 2: return ticket;
    case 3: return open;
    case 4: return high;
    case 5: return close;
    case 6: return volume;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: date = (java.lang.CharSequence)value$; break;
    case 2: ticket = (java.lang.CharSequence)value$; break;
    case 3: open = (java.lang.CharSequence)value$; break;
    case 4: high = (java.lang.CharSequence)value$; break;
    case 5: close = (java.lang.CharSequence)value$; break;
    case 6: volume = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'ticket' field.
   * @return The value of the 'ticket' field.
   */
  public java.lang.CharSequence getTicket() {
    return ticket;
  }

  /**
   * Sets the value of the 'ticket' field.
   * @param value the value to set.
   */
  public void setTicket(java.lang.CharSequence value) {
    this.ticket = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public java.lang.CharSequence getOpen() {
    return open;
  }

  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(java.lang.CharSequence value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public java.lang.CharSequence getHigh() {
    return high;
  }

  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(java.lang.CharSequence value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public java.lang.CharSequence getClose() {
    return close;
  }

  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(java.lang.CharSequence value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public java.lang.CharSequence getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.lang.CharSequence value) {
    this.volume = value;
  }

  /**
   * Creates a new Quote RecordBuilder.
   * @return A new Quote RecordBuilder
   */
  public static avro.Quote.Builder newBuilder() {
    return new avro.Quote.Builder();
  }

  /**
   * Creates a new Quote RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Quote RecordBuilder
   */
  public static avro.Quote.Builder newBuilder(avro.Quote.Builder other) {
    return new avro.Quote.Builder(other);
  }

  /**
   * Creates a new Quote RecordBuilder by copying an existing Quote instance.
   * @param other The existing instance to copy.
   * @return A new Quote RecordBuilder
   */
  public static avro.Quote.Builder newBuilder(avro.Quote other) {
    return new avro.Quote.Builder(other);
  }

  /**
   * RecordBuilder for Quote instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Quote>
    implements org.apache.avro.data.RecordBuilder<Quote> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence date;
    private java.lang.CharSequence ticket;
    private java.lang.CharSequence open;
    private java.lang.CharSequence high;
    private java.lang.CharSequence close;
    private java.lang.CharSequence volume;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.Quote.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ticket)) {
        this.ticket = data().deepCopy(fields()[2].schema(), other.ticket);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.open)) {
        this.open = data().deepCopy(fields()[3].schema(), other.open);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.volume)) {
        this.volume = data().deepCopy(fields()[6].schema(), other.volume);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Quote instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.Quote other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ticket)) {
        this.ticket = data().deepCopy(fields()[2].schema(), other.ticket);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.open)) {
        this.open = data().deepCopy(fields()[3].schema(), other.open);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.volume)) {
        this.volume = data().deepCopy(fields()[6].schema(), other.volume);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public avro.Quote.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public avro.Quote.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticket' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicket() {
      return ticket;
    }

    /**
      * Sets the value of the 'ticket' field.
      * @param value The value of 'ticket'.
      * @return This builder.
      */
    public avro.Quote.Builder setTicket(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ticket = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ticket' field has been set.
      * @return True if the 'ticket' field has been set, false otherwise.
      */
    public boolean hasTicket() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ticket' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearTicket() {
      ticket = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public java.lang.CharSequence getOpen() {
      return open;
    }

    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public avro.Quote.Builder setOpen(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.open = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearOpen() {
      open = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public java.lang.CharSequence getHigh() {
      return high;
    }

    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public avro.Quote.Builder setHigh(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.high = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearHigh() {
      high = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public java.lang.CharSequence getClose() {
      return close;
    }

    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public avro.Quote.Builder setClose(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.close = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearClose() {
      close = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public java.lang.CharSequence getVolume() {
      return volume;
    }

    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public avro.Quote.Builder setVolume(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.volume = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public avro.Quote.Builder clearVolume() {
      volume = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Quote build() {
      try {
        Quote record = new Quote();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ticket = fieldSetFlags()[2] ? this.ticket : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.open = fieldSetFlags()[3] ? this.open : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.high = fieldSetFlags()[4] ? this.high : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.close = fieldSetFlags()[5] ? this.close : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.volume = fieldSetFlags()[6] ? this.volume : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Quote>
    WRITER$ = (org.apache.avro.io.DatumWriter<Quote>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Quote>
    READER$ = (org.apache.avro.io.DatumReader<Quote>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
