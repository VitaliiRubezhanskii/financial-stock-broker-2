version: "3.2"
networks:
    my-mongo-cluster:
services:
   tracing:
      image: openzipkin/zipkin
      ports:
        - 9411:9411
#      build:
#        context: ./support/tracing
#        dockerfile: Dockerfile
      depends_on:
        - mongo-replicator
        - configserver
        - discovery
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9411/zipkin/"]
        interval: 30s
        timeout: 10s
        retries: 5
      restart: always
      networks:
         - my-mongo-cluster

#   turbine:
#     image: turbine
#     ports:
#       - 8990:8990
#     build:
#       context: ./support/turbine
#       dockerfile: Dockerfile
#     environment:
#       PORT: 8990
#       SPRING_PROFILES_ACTIVE: docker
#       CONFIGSERVER_URI: http://configserver:8888
#     depends_on:
#       - mongo-replicator
#       - configserver
#       - discovery
#       - broker
#       - rabbitmq
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8990/"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#     restart: always
#     networks:
#        - my-mongo-cluster
#
#   rabbitmq:
#       image: 'bitnami/rabbitmq:latest'
#       ports:
#         - 5675:5672
#         - 15675:15672
#       networks:
#         - my-mongo-cluster

   mongodb:
     image: mongocustom:latest
     environment:
       MONGO_INITDB_ROOT_USERNAME: root
       MONGO_INITDB_ROOT_PASSWORD: rootpassword
     ports:
       - 27017:27017
     volumes:
       - /etc/localtime:/etc/localtime:ro
       - ./mongodb/data:/data/db
     networks:
      - my-mongo-cluster


   mongo1:
      image: mongo:4.1.13-bionic
      command: --replSet rs0 --bind_ip_all
      ports:
        - 27018:27017
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /mongo_cluster/data1:/data/db
      networks:
        - my-mongo-cluster
   mongo2:
      image: mongo:4.1.13-bionic
      command: --replSet rs0 --bind_ip_all
      ports:
        - 27019:27017
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /mongo_cluster/data2:/data/db
      networks:
        - my-mongo-cluster
      depends_on:
        - mongo1
   mongo3:
      image: mongo:4.1.13-bionic
      command: --replSet rs0 --bind_ip_all
      ports:
        - 27020:27017
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /mongo_cluster/data3:/data/db
      networks:
        - my-mongo-cluster
      depends_on:
       - mongo1
       - mongo2

   mongo-replicator:
      build:
        context: ./mongodb
        dockerfile: Dockerfile
      networks:
        - my-mongo-cluster
      depends_on:
        - mongo1
        - mongo2
        - mongo3

   configserver:
       container_name: configserver
       network_mode: host
       expose:
        - 8888
#       ports:
#        - 8888:8888
       environment:
         SPRING_PROFILES_ACTIVE: docker
         PORT: 8888
         DISCOVERY: http://localhost:8761/eureka
       healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8888"]
         interval: 30s
         timeout: 10s
         retries: 5
       image: config_service:latest
       build:
         context: ./config
         dockerfile: Dockerfile

#       volumes:
#         - /home/user/Documents/03. Education/financial-stock-broker-2/configuration:/var/lib/financial-stock-broker-2/configuration
#       depends_on:
#         - mongo-replicator
#         - discovery
       restart: always
#       networks:
#        - my-mongo-cluster

   discovery:
      container_name: discovery
      network_mode: host
      expose:
       - 8761
#      ports:
#       - 8761:8761
      environment:
        CONFIGSERVER_URI: http://localhost:8888
        PORT: 8761
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8761/eureka/"]
        interval: 30s
        timeout: 10s
        retries: 5
      image: discovery_service:latest
      build:
        context: ./monitoring
        dockerfile: Dockerfile
#      depends_on:
#        - mongo-replicator
      restart: always
#      labels:
#        collect_logs_with_filebeat: "true"
#        decode_log_event_to_json_object: "true"
#      networks:
#       - my-mongo-cluster

   order:
      container_name: order_service
      expose:
        - 8082
      ports:
       - 8082:8082
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:8082"]
         interval: 30s
         timeout: 10s
         retries: 5
      image: order_service:latest
#      build:
#        context: ./core/order-service
#        dockerfile: Dockerfile
      environment:
        PORT: 8082
        SPRING_PROFILES_ACTIVE: docker
        CONFIGSERVER_URI: http://configserver:8888
      depends_on:
           - mongo-replicator
           - configserver
           - discovery
#           - broker
      restart: always
      labels:
        collect_logs_with_filebeat: "true"
        decode_log_event_to_json_object: "true"
      networks:
        - my-mongo-cluster

   auth:
     container_name: auth
     expose:
       - 8084

     ports:
       - 8084:8084

     healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost:8084"]
       interval: 30s
       timeout: 10s
       retries: 5
     image: auth:latest
#     build:
#       context: ./support/auth
#       dockerfile: Dockerfile
     environment:
       PORT: 8084
       SPRING_PROFILES_ACTIVE: docker
       CONFIGSERVER_URI: http://configserver:8888
     depends_on:
       - mongo-replicator
       - configserver
       - discovery
#       - zookeeper
#       - broker
#       - schema-registry
     restart: always
     labels:
       collect_logs_with_filebeat: "true"
       decode_log_event_to_json_object: "true"
     networks:
       - my-mongo-cluster

#   order2:
#     container_name: order_service2
#     expose:
#       - 8092
#     ports:
#       - 8092:8092
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8092"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#     image: order_service:latest
#     build:
#       context: ./core/order-service
#       dockerfile: Dockerfile
#     environment:
#       PORT: 8092
#       SPRING_PROFILES_ACTIVE: docker
#       CONFIGSERVER_URI: http://configserver:8888
#     depends_on:
#       - mongo-replicator
#       - configserver
#       - discovery
#       - zookeepere
#       - broker
#       - schema-registry
#     restart: always
#     labels:
#       collect_logs_with_filebeat: "true"
#       decode_log_event_to_json_object: "true"
#     networks:
#       - my-mongo-cluster

   account:
      container_name: account_service
      expose:
       - 8091
      ports:
       - 8091:8091
      environment:
        PORT: 8091
        SPRING_PROFILES_ACTIVE: docker
        CONFIGSERVER_URI: http://configserver:8888
      healthcheck:
        test: ["CMD", "curl", "-f", "http://configserver:8888/account/docker"]
        interval: 30s
        timeout: 10s
        retries: 5
      image: account_service:latest
#      build:
#        context: ./core/account-service
#        dockerfile: Dockerfile
      depends_on:
         - mongo-replicator
         - configserver
         - discovery
#         - broker
      links:
        - configserver
        - discovery
      restart: on-failure
      labels:
        collect_logs_with_filebeat: "true"
        decode_log_event_to_json_object: "true"
      networks:
        - my-mongo-cluster

   gateway:
      container_name: gateway
      network_mode: host
      expose:
       - 8100
#      ports:
#       - 5000:5000
      environment:
        PORT: 8100
        SPRING_PROFILES_ACTIVE: docker
        CONFIGSERVER_URI: http://localhost:8888
#      healthcheck:
#        test: ["CMD", "curl", "-f", "http://localhost:5000"]
#        interval: 30s
#        timeout: 10s
#        retries: 5
      image: gateway:latest
      build:
        context: ./gateway
        dockerfile: Dockerfile
      depends_on:
#        - mongodb
        - configserver
        - discovery
      restart: on-failure
#      labels:
#        collect_logs_with_filebeat: "true"
#        decode_log_event_to_json_object: "true"
#      networks:
#       - my-mongo-cluster

   feign:
       container_name: feign-hystrix-service
       network_mode: host
       expose:
         - 8099
#       ports:
#         - 8099:8099
       environment:
         PORT: 8099
         SPRING_PROFILES_ACTIVE: docker
         CONFIGSERVER_URI: http://configserver:8888
       image: feign-hystrix-service:latest
       build:
         context: ./feign-hystrix-client
         dockerfile: Dockerfile
       depends_on:
         - mongodb
         - configserver
         - discovery
       restart: always
       labels:
         collect_logs_with_filebeat: "true"
         decode_log_event_to_json_object: "true"
#       networks:
#         - my-mongo-cluster

   analytics:
       container_name: analytics
       network_mode: host
       expose:
         - 9998
#       ports:
#         - 9998:9998
       environment:
         PORT: 9998
         SPRING_PROFILES_ACTIVE: docker
         CONFIGSERVER_URI: http://localhost:8888
       image: analytics
       build:
         context: ./analytics-service
         dockerfile: Dockerfile
       depends_on:
#         - mongo-replicator
#         - mongo-replicator
         - configserver
         - discovery
#         - zookeeper
#         - broker
         - schema-registry
       restart: always
#       labels:
#         collect_logs_with_filebeat: "true"
#         decode_log_event_to_json_object: "true"
#       networks:
#         - my-mongo-cluster

   finprovider:
      container_name: finprovider-service
      network_mode: host
      expose:
        - 9010
#      ports:
#        - 9010:9010
      environment:
        PORT: 9010
        SPRING_PROFILES_ACTIVE: docker
        CONFIGSERVER_URI: http://localhost:8888
        NAME: finprovider-FAILED
#      image: finprovider
      build:
        context: ./quotes-provider-service
        dockerfile: Dockerfile
      depends_on:
#        - mongo-replicator
        - configserver
        - discovery
#        - zookeeper
#        - broker
        - schema-registry
      restart: always
#      labels:
#        collect_logs_with_filebeat: "true"
#        decode_log_event_to_json_object: "true"
#      networks:
#        - my-mongo-cluster

   postgres:
      image: postgres:10.5
      restart: always
#      network_mode: host
      environment:
         - POSTGRES_USER=postgres
         - POSTGRES_PASSWORD=postgres
      logging:
         options:
           max-size: 10m
           max-file: "3"
      ports:
         - '5432:5432'
      volumes:
        - ./postgres/data:/data/postgres
      networks:
        - my-mongo-cluster

   plain-producer:
     container_name: plain-producer
     image: plainproducer
     ports:
       - '8080:8080'
     build:
       context: ./prodcons
       dockerfile: Dockerfile
     depends_on:
       - zookeeper
       - broker
       - schema-registry
     restart: always
     networks:
       - my-mongo-cluster

   zookeeper:
     image: confluentinc/cp-zookeeper:5.0.0
     hostname: zookeeper
     container_name: zookeeper
     ports:
       - "2181:2181"
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000
     networks:
       - my-mongo-cluster

   broker:
     image: confluentinc/cp-enterprise-kafka:5.0.0
     hostname: broker
     container_name: broker
     depends_on:
       - zookeeper
     ports:
       - "9092:9092"
       - "29092:29092"
     environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
       KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
       CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
       CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
       CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
       CONFLUENT_METRICS_ENABLE: 'true'
       CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
       KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
     volumes:
       - ./kafka/etc/kafka:/etc/kafka
       - ./kafka/data:/var/lib/kafka/data
       - ./kafka/kafka-cli-scripts:/var/lib/kafka/scripts
     networks:
       - my-mongo-cluster

   schema-registry:
     image: confluentinc/cp-schema-registry:5.0.0
#     hostname: schema-registry
     network_mode: host
#     container_name: schema-registry
     depends_on:
       - kafka-1
       - kafka-2
       - kafka-3
#       - zookeeper
#       - broker
#     ports:
#       - "8081:8081"
#       - "8990:8990"
     environment:
       SCHEMA_REGISTRY_HOST_NAME: localhost
       #SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
       SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://localhost:19092,PLAINTEXT://localhost:29092,PLAINTEXT://localhost:39092


   zookeeper-1:
     image: confluentinc/cp-zookeeper:4.1.4
     network_mode: host
     environment:
       ZOOKEEPER_SERVER_ID: 1
       ZOOKEEPER_CLIENT_PORT: 22181
       ZOOKEEPER_TICK_TIME: 2000
       ZOOKEEPER_INIT_LIMIT: 5
       ZOOKEEPER_SYNC_LIMIT: 2
       ZOOKEEPER_SERVERS: localhost:22888:23888;localhost:32888:33888;localhost:42888:43888

   zookeeper-2:
       image: confluentinc/cp-zookeeper:4.1.4
       network_mode: host
       environment:
         ZOOKEEPER_SERVER_ID: 2
         ZOOKEEPER_CLIENT_PORT: 32181
         ZOOKEEPER_TICK_TIME: 2000
         ZOOKEEPER_INIT_LIMIT: 5
         ZOOKEEPER_SYNC_LIMIT: 2
         ZOOKEEPER_SERVERS: localhost:22888:23888;localhost:32888:33888;localhost:42888:43888

   zookeeper-3:
       image: confluentinc/cp-zookeeper:4.1.4
       network_mode: host
       environment:
         ZOOKEEPER_SERVER_ID: 3
         ZOOKEEPER_CLIENT_PORT: 42181
         ZOOKEEPER_TICK_TIME: 2000
         ZOOKEEPER_INIT_LIMIT: 5
         ZOOKEEPER_SYNC_LIMIT: 2
         ZOOKEEPER_SERVERS: localhost:22888:23888;localhost:32888:33888;localhost:42888:43888

   kafka-1:
       image: confluentinc/cp-kafka:4.1.4
       network_mode: host
       depends_on:
         - zookeeper-1
         - zookeeper-2
         - zookeeper-3
       environment:
         KAFKA_BROKER_ID: 1
         KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:19092
         KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#       volumes:
#         - ./kafka/etc/kafka:/etc/kafka
#         - ./kafka/data:/var/lib/kafka/data
#         - ./kafka/kafka-cli-scripts:/var/lib/kafka/scripts

   kafka-2:
       image: confluentinc/cp-kafka:4.1.4
       network_mode: host
       depends_on:
         - zookeeper-1
         - zookeeper-2
         - zookeeper-3
       environment:
         KAFKA_BROKER_ID: 2
         KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092
         KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#       volumes:
#         - ./kafka/etc/kafka:/etc/kafka
#         - ./kafka/data:/var/lib/kafka/data
#         - ./kafka/kafka-cli-scripts:/var/lib/kafka/scripts

   kafka-3:
       image: confluentinc/cp-kafka:4.1.4
       network_mode: host
       depends_on:
         - zookeeper-1
         - zookeeper-2
         - zookeeper-3
       environment:
         KAFKA_BROKER_ID: 3
         KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:39092
         KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#       volumes:
#         - ./kafka/etc/kafka:/etc/kafka
#         - ./kafka/data:/var/lib/kafka/data
#         - ./kafka/kafka-cli-scripts:/var/lib/kafka/scripts


   connect:
     image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.1
     hostname: connect
     container_name: connect
     depends_on:
       - broker
       - schema-registry
     ports:
       - "8083:8083"
     environment:
       CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
       CONNECT_REST_ADVERTISED_HOST_NAME: connect
       CONNECT_REST_PORT: 8083
       CONNECT_GROUP_ID: compose-connect-group
       CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
       CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
       CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
       CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
       # CLASSPATH required due to CC-2422
       CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.2.1.jar
       CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
       CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
       CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
       CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

   control-center:
       image: confluentinc/cp-enterprise-control-center:6.2.1
       hostname: control-center
       container_name: control-center
       depends_on:
         - broker
         - schema-registry
         - connect
         - ksqldb-server
       ports:
         - "9021:9021"
       environment:
         CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
         CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
         CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
         CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
         CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
         CONTROL_CENTER_REPLICATION_FACTOR: 1
         CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
         CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
         CONFLUENT_METRICS_TOPIC_REPLICATION: 1
         PORT: 9021

   ksqldb-server:
       image: confluentinc/cp-ksqldb-server:6.2.1
       hostname: ksqldb-server
       container_name: ksqldb-server
       depends_on:
         - broker
         - connect
       ports:
         - "8088:8088"
       environment:
         KSQL_CONFIG_DIR: "/etc/ksql"
         KSQL_BOOTSTRAP_SERVERS: "broker:29092"
         KSQL_HOST_NAME: ksqldb-server
         KSQL_LISTENERS: "http://0.0.0.0:8088"
         KSQL_CACHE_MAX_BYTES_BUFFERING: 0
         KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
         KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
         KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
         KSQL_KSQL_CONNECT_URL: "http://connect:8083"
         KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
         KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
         KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

   ksqldb-cli:
       image: confluentinc/cp-ksqldb-cli:6.2.1
       container_name: ksqldb-cli
       depends_on:
         - broker
         - connect
         - ksqldb-server
       entrypoint: /bin/sh
       tty: true

   ksql-datagen:
       image: confluentinc/ksqldb-examples:6.2.1
       hostname: ksql-datagen
       container_name: ksql-datagen
       depends_on:
         - ksqldb-server
         - broker
         - schema-registry
         - connect
       command: "bash -c 'echo Waiting for Kafka to be ready... && \
                         cub kafka-ready -b broker:29092 1 40 && \
                         echo Waiting for Confluent Schema Registry to be ready... && \
                         cub sr-ready schema-registry 8081 40 && \
                         echo Waiting a few seconds for topic creation to finish... && \
                         sleep 11 && \
                         tail -f /dev/null'"
       environment:
         KSQL_CONFIG_DIR: "/etc/ksql"
         STREAMS_BOOTSTRAP_SERVERS: broker:29092
         STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
         STREAMS_SCHEMA_REGISTRY_PORT: 8081

   rest-proxy:
       image: confluentinc/cp-kafka-rest:6.2.1
       depends_on:
         - broker
         - schema-registry
       ports:
         - 8082:8082
       hostname: rest-proxy
       container_name: rest-proxy
       environment:
         KAFKA_REST_HOST_NAME: rest-proxy
         KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
         KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
         KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

   connectui:
       image: "landoop/kafka-connect-ui"
       hostname: connectui
       depends_on:
         - zookeeper
         - broker
         - schema-registry
       ports:
         - '8000:8000'
       environment:
         CONNECT_URL: "http://kafka-connect-cp:18083"
       networks:
         - my-mongo-cluster

   cassandra:
       image: library/cassandra:3.0
#       network_mode: host
       hostname: cassandra
       restart: always
       container_name: cassandra
       networks:
         - my-mongo-cluster


   filebeat:
     hostname: filebeat
     image: docker-logs-elk/filebeat:1.0.0
     build:
       context: filebeat
       dockerfile: Dockerfile
     volumes:
       # needed to access all docker logs (read only) :
       - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
       # needed to access additional informations about containers
       - "/var/run/docker.sock:/var/run/docker.sock"
     links:
       - logstash
     networks:
       - my-mongo-cluster

   kibana:
     image: kibana:6.5.2
     environment:
       - "LOGGING_QUIET=true"
     links:
       - elasticsearch
     ports:
       - 5601:5601
     networks:
       - my-mongo-cluster

   logstash:
     hostname: logstash
     image: docker-logs-elk/logstash:1.0.0
     build:
       context: logstash
       dockerfile: Dockerfile
     ports:
       - 5044:5044
     environment:
       LOG_LEVEL: info
     links:
       - elasticsearch
     networks:
       - my-mongo-cluster


   elasticsearch:
     hostname: elasticsearch
     image: docker-logs-elk/elasticsearch:1.0.0
     build:
       context: elasticsearch
       dockerfile: Dockerfile
     environment:
       - cluster.name=docker-logs-elk-cluster
       - bootstrap.memory_lock=true
       - ES_JAVA_OPTS=-Xms256m -Xmx256m
     ulimits:
       memlock:
         soft: -1
         hard: -1
     ports:
       - 9200:9200
     networks:
       - my-mongo-cluster

   keycloak:
     image: quay.io/keycloak/keycloak:15.0.1
     ports:
       - "8080:8080"
     environment:
       - KEYCLOAK_USER=admin
       - KEYCLOAK_PASSWORD=admin
     volumes:
       - ./keycloak/data:/data/

   redis:
     image: "redis:alpine"
     command: redis-server --requirepass sOmE_sEcUrE_pAsS
     network_mode: host
#     ports:
#       - "6379:6379"
     volumes:
       - ./redis/redis-data:/var/lib/redis
       - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
     environment:
       - REDIS_REPLICATION_MODE=master
#     networks:
#       - my-mongo-cluster