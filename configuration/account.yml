kc:
  base-url: http://localhost:8080
  realm: My-Realm
  realm-url: ${kc.base-url}/realms/${kc.realm}

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/quotes_provider
    password: postgres
    username: postgres
    driverClassName: org.postgresql.Driver
    hikari:
      connectionTimeOut: 2000
      maximumPoolSize: 5
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect
    hibernate.ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        temp.use_jdbc_metadata_defaults: false

  security:
    oauth2:
      client:
        registration:
          keycloak-spring-gateway-client:
            provider: my-keycloak-provider
            scope: openid
            client-id: spring-gateway-client
            client-secret: 3RhEF8pqKTANrQ6BhfxaYVmcjTXsDK0u
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
        provider:
          my-keycloak-provider:
            issuer-uri: ${kc.realm-url}
            jwk-set-uri: ${kc.realm-url}/protocol/openid-connect/certs
            authorization-uri: http://localhost:8080/realms/My-Realm/protocol/openid-connect/auth
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/My-Realm/protocol/openid-connect/certs


  zipkin:
    enabled: true
    baseUrl: http://localhost:9411
  sleuth:
    sampler:
      probability: 100

server.port: 8093

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
    register-with-eureka: true
    fetch-registry: true
  
microservice:
  client:
    url: http://localhost:8099
    
security.basic.enabled: false


