spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/quotes_provider
    password: postgres
    username: postgres
    driverClassName: org.postgresql.Driver
    hikari:
      connectionTimeOut: 2000
      maximumPoolSize: 5
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect
    hibernate.ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        temp.use_jdbc_metadata_defaults: false  

  security.oauth2:
    client:
      registration:
        broker:
          clientId: account
          clientName: account
          clientSecret: e549e738-d8e4-4cbd-8381-fc8dcc8194d5
          provider: keycloak
          authorizationGrantType: authorization_code
          scope: openid, profile
          redirectUri: "http://localhost:8093/login/oauth2/code/{registrationId}"
      provider:
        keycloak:
          authorizationUri: ${kc.realm-url}/protocol/openid-connect/auth
          jwkSetUri: ${kc.realm-url}/protocol/openid-connect/certs
          tokenUri: ${kc.realm-url}/protocol/openid-connect/token
          # would be cool if there was a end-session-uri to propagate logouts

          #  User info endpoint not needed since Keycloak uses self-contained value tokens
          #            user-info-uri: ${kc.realm-url}/protocol/openid-connect/userinfo
          userNameAttribute: preferred_username
  zipkin:
    enabled: true
    baseUrl: http://localhost:9411
  sleuth:
    sampler:
      probability: 100
      

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
    register-with-eureka: true
    fetch-registry: true
    
#security:
#    client:
#      clientId: account
#      clientSecret: 1234
#      accessTokenUri: http://localhost:9000/uaa/oauth/token
#      grant-type: client_credentials
#      scope: server
#    resource:
#       user-info-uri: http://localhost:9000/uaa/user/current
#       token-info-uri: http://localhost:9000/uaa/oauth/check_token


microservice:
  client:
    url: http://localhost:8099
kc:
  base-url: http://localhost:8080/auth
  realm: broker
  realm-url: ${kc.base-url}/realms/${kc.realm}
keycloak:
  enabled: true
  realm: broker
  auth-server-url: http://localhost:8080/auth
  ssl-required: none
#keycloak resource is the client ID
  resource: broker
  use-resource-role-mappings: true
#The line below will prevent redirect to login page
  bearer-only: true
