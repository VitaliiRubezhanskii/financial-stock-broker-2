server.port: 9998
spring.application.name: analytics
spring.kafka.properties.schema.registry.url: http://schema-registry:8081
spring.cloud.stream.bindings.process-out-0:
  destination: quote-aggregation
  contentType: application/*+avro
  producer:
    keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    
spring.cloud.stream.bindings.process-in-0:
  destination: quote
  contentType: application/*+avro
  consumer:
    keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.binder:
    brokers: broker
    replicationFactor: 1
    partitionCount: 4
    configuration:
      schema.registry.url: http://schema-registry:8081
      commit.interval.ms: 1000
      key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
 spring.cloud.stream.kafka.binder:
      producer-properties:
         key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
         value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
         schema.registry.url: http://schema-registry:8081
      consumer-properties:
         key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
         value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
         schema.registry.url: http://schema-registry:8081
         specific.avro.reader: true


eureka:
  instance:
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 2

  client:
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/
    healthcheck:
      enabled: true
    lease:
      duration: 5

management:
  security:
    enabled: false
