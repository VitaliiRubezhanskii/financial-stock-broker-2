spring:
  data:
    mongodb:
      uri: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/order?replicaSet=rs0

  cloud:
    stream:
#      default:
#        producer:
#          useNativeEncoding: true
#        consumer:
#          useNativeEncoding: true
      bindings:
        input:
          destination: order-response
          content-type: application/*+avro
        output1:
           destination: orders
           content-type: application/*+avro
           group: group-1
           concurrency: 3
        output0:
          destination: order-request
          content-type: application/*+avro
          group: group-1
          concurrency: 3
      kafka:
          binder:
           producer-properties:
             key.serializer: rg.apache.kafka.common.serialization.Serdes$StringSerde
             value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
             schema.registry.url: http://schema-registry:8081
           consumer-properties:
             key.deserializer: rg.apache.kafka.common.serialization.Serdes$StringSerde
             value.deserializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
             schema.registry.url: http://schema-registry:8081
             specific.avro.reader: true
           brokers: broker
           streams:
               binder:
                 brokers: broker
spring.cloud.stream.schemaRegistryClient.endpoint: http://schema-registry:8081
spring.cloud.stream.schemaRegistryClient.cached: false


security.oauth2:
    client:
      clientId: order
      clientSecret: 1234
      accessTokenUri: http://auth:8084/uaa/oauth/token
      grant-type: client_credentials
      scope: server


    resource:
      user-info-uri: http://auth:8084/uaa/user/current
      token-info-uri: http://auth:8084/uaa/oauth/check_token