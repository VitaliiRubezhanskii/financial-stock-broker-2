import com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-snapshot-local" }
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.14.2"
    }
}

apply plugin: "com.commercehub.gradle.plugin.avro-base"

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.apache.avro:avro:1.8.2'

    implementation 'io.confluent:kafka-streams-avro-serde:5.4.0'
    implementation 'io.confluent:kafka-avro-serializer:4.0.0'
    implementation 'io.confluent:kafka-schema-registry-client:4.1.0'

    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.cloud:spring-cloud-schema-registry-client'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

}

avro {
    stringType = "CharSequence"
}

task generateAvro(type: GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("src/main/java/")
}
compileJava.source(generateAvro.outputs)

bootRun {
    mainClass = 'com.investment.AnalyticsServiceApplication'
}
jar {
    manifest {
        attributes 'Main-Class': 'com.investment.AnalyticsServiceApplication'
    }
}
