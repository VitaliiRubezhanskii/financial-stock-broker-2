import com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-snapshot-local" }
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.14.2"
    }
}

apply plugin: "com.commercehub.gradle.plugin.avro-base"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'org.springframework.cloud:spring-cloud-schema-registry-client'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'

    implementation 'org.postgresql:postgresql:9.4.1208'
    implementation 'org.flywaydb:flyway-core:6.4.4'

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'org.apache.avro:avro:1.8.2'
    implementation ('io.confluent:kafka-streams-avro-serde:5.3.0') {
        exclude(module: 'log4j-over-slf4j')
    }
    implementation 'io.confluent:kafka-avro-serializer:5.2.1'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

avro {
    stringType = "CharSequence"
}

task generateAvro(type: GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("src/main/java/")
}
tasks.named("compileJava").configure {
    source(generateAvro)
}
compileJava.source(generateAvro.outputs)

bootRun {
    mainClass = 'com.investment.quotesproviderservice.QuotesProviderServiceApplication'
}
jar {
    manifest {
        attributes 'Main-Class': 'com.investment.quotesproviderservice.QuotesProviderServiceApplication'
    }
}