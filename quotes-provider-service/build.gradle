import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.3.0'
    id 'org.springframework.boot' version "${springBootVersion}"
}

repositories {
    maven { url { 'https://packages.confluent.io/maven' }}
}

apply plugin: 'java'
apply plugin: 'com.github.davidmc24.gradle.plugin.avro'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-context'

    if ("${kubernetes}" == "false") {
        // Spring Cloud for local application run
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-config-client'
        println " with Netflix"
    } else {
        // Spring Cloud Kubernetes
        implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-all'
        println " with Kubernetes"
    }

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Kafka
    implementation 'org.apache.avro:avro:1.11.0'
    implementation 'io.confluent:kafka-streams-avro-serde:5.3.0'
    implementation 'io.confluent:kafka-avro-serializer:5.3.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.4.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'

    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.flywaydb:flyway-core:6.4.4'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

//    implementation (project (':security-autoconfig'))
}

avro {
    stringType = "CharSequence"
}

task generateAvro(type: GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("src/main/java/")
}
tasks.named("compileJava").configure {
    source(generateAvro)
}
compileJava.source(generateAvro.outputs)

bootRun {
    mainClass = 'com.investment.QuotesProviderServiceApplication'
}
jar {
    manifest {
        attributes 'Main-Class': 'com.investment.QuotesProviderServiceApplication'
    }
}