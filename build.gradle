buildscript {
    project.ext {
        springBootVersion = '2.0.4.RELEASE'
        springCloudVersion = '2020.0.4'
        versionName = '0.0.1'
        gradleDockerVersion = '1.2'
        swagger2version = '2.9.2'
    }
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/libs-snapshot-local" }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
        classpath "org.jetbrains.kotlin:kotlin-allopen:1.5.31"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31'
        classpath 'org.jetbrains.kotlin:kotlin-maven-plugin:1.5.31'
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.jvm'  version "1.5.31"
}
//
//subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    repositories {
        mavenLocal()
        maven { url = uri('https://repo.maven.apache.org/maven2/') }
        maven { url = uri('https://repo.spring.io/libs-snapshot-local') }
        maven { url = uri('https://repo.spring.io/libs-milestone-local') }
        maven { url = uri('https://packages.confluent.io/maven/') }
        maven { url = uri('https://repo.spring.io/release') }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.4"
        }
    }
//    configure(subprojects.stream().filter {
//            it.name.startsWith("account-service")
//                    || it.name.startsWith("analytics")
//                    || it.name.startsWith("feign")
//                    || it.name.startsWith("gateway")
//                    || it.name.startsWith("quotes")
//                    || it.name.startsWith("order")
//    }) {
//        dependencies {
//            implementation 'org.springframework.boot:spring-boot-starter-web'
//
//            implementation 'org.springframework.boot:spring-boot-starter-security'
//            implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//
//            implementation 'org.springframework.cloud:spring-cloud-starter-config'
//            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//
//            implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
//            implementation 'org.springframework.boot:spring-boot-starter-actuator'
//
//            compileOnly 'org.projectlombok:lombok:1.18.20'
//            annotationProcessor 'org.projectlombok:lombok:1.18.20'
//
//            testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        }
//    }
//    configure(subprojects.stream().filter {
//        it.name.startsWith("monitoring")
//    }) {
//        dependencies {
//            implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
//            implementation 'org.springframework.retry:spring-retry'
////            implementation 'org.springframework.cloud:spring-cloud-starter-eureka-server:1.4.7.RELEASE'
//            implementation 'org.springframework.cloud:spring-cloud-config-client'
//            testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        }
//    }
//    configure(subprojects.stream().filter {
//        it.name.startsWith("config")
//    }) {
//        dependencies {
//            implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//            implementation 'org.springframework.cloud:spring-cloud-config-server'
//        }
//    }

//}

tasks.whenTaskAdded { task ->
    if(task.name.contains("compileJava") || task.name.contains("bootJarMainClassName")) {
        task.enabled = false
    }
}

dependencies {
        implementation (project (':gateway'))
//        implementation(project(':prodcons'))
//        implementation (project (':demo'))
        implementation(project(':feign-hystrix-client'))
        implementation(project(':config'))
        implementation(project(':monitoring'))
        implementation(project(':account-service'))
        implementation(project(':analytics-service'))
        implementation(project(':quotes-provider-service'))
        implementation(project(':order-service'))
        implementation(project(":security-autoconfig"))

}

bootJar {
    enabled = false
}

jar {
    enabled = true
}
